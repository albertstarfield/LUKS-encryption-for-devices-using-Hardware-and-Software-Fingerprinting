#!/bin/bash
# Made by Albert Starfield Wahyu Suryo Samudro
######################
echo "hwswhashd EncryptStorageTrustTool revision 4 has been launched and will stay alive for ~350 seconds"
if [ -f /encryptStorageTrustTool/bypass.flag ];then # if user defined that system need to be deactivated or in bypass mode the user can reeinput their backup password and letting the system decrypt itself using the old method of passwordhash.gpg
keyHash="0000000000000000000000000000000"
else
hwHash="$(echo $(echo $(lsusb | sha512sum); echo $( lshw -c system | sha512sum ) ; echo $( lspci | sha512sum ) ; echo $( dmidecode -t system | sha512sum )) | sha512sum )"
userspaceBinaryHash="$(echo $( sha512sum /bin/* ) | sha512sum)" #checking the integrity of crucial binary usually at /bin
authToolsIntegrityHash="$(echo $(sha512sum /encryptStorageTrustTool/hwswhashd /encryptStorageTrustTool/renewTrustHashKey /encryptStorageTrustTool/submitkey /encryptStorageTrustTool/lukstrusteddecrypthandler.sh ; sha512sum $(pwd)/diskConfig ) | sha512sum )"
bootloaderIntegrityHash="$(echo $(sha512sum $(find /boot/efi -type f)) | sha512sum)"
osKernelIntegrityHash="$(echo $(sha512sum /boot/*initrd* ; sha512sum /boot/*vmlinuz* ) | sha512sum)"
startupSystemDIntegrityHash="$(echo $(ls /etc/systemd/system | sha512sum) | sha512sum)"
#legacy Code sample keyHash=$(echo $( echo $( lsusb | sha512sum ) ; echo $( lshw -c system | sha512sum ) ; echo $( lspci | sha512sum ); ls /encryptStorageTrustTool ; sha512sum /encryptStorageTrustTool/keyHash /encryptStorageTrustTool/renewdatahash /encryptStorageTrustTool/submitkey /encryptStorageTrustTool/lukstrusteddecrypthandler.sh ; echo $( dmidecode -t system | sha512sum ) ; echo $( ls /etc/systemd/system | sha512sum ) ; sha512sum /boot/*initrd* ; sha512sum /boot/*vmlinuz* ) | sha512sum )
keyHash=$(echo "${hwHash}${userspaceBinaryHash}${authToolsIntegrityHash}${bootloaderIntegrityHash}${osKernelIntegrityHash}" | sha512sum)
fi

clearkeyHash(){
sleep 300 #waiting for 5 minutes for anyone that require the auth key before being destroyed from the temporary memory
if [ -f /tmp/keyHash ]; then
rm /tmp/keyHash
fi
}

echo "${keyHash}" > /tmp/keyHash
clearkeyHash
